aroai_renew_modifier = {
    remove_modifier = $name$
    add_modifier = {
        name = $name$
        days = $days$
    }
}

aroai_renew_variable = {
    remove_variable = $name$
    set_variable = {
        name = $name$
        days = $days$
    }
}

aroai_add_to_variable = {
    if = {
        limit = {
            NOT = {
                has_variable = $name$
            }
        }
        set_variable = {
            name = $name$
            value = $value$
        }
    }
    else = {
        change_variable = {
            name = $name$
            add = $value$
        }
    }
}

aroai_add_to_local_variable = {
    if = {
        limit = {
            NOT = {
                has_local_variable = $name$
            }
        }
        set_local_variable = {
            name = $name$
            value = $value$
        }
    }
    else = {
        change_local_variable = {
            name = $name$
            add = $value$
        }
    }
}



#
# tag           : tag_aroai_count_barracks_and_conscription_centers_of_all_countries
# Called by     : aroai_framework_events.1
# Normally this stuff is counted during building cycle, but every country depends on counts of all the other ones
# for military calculations, so we just count them all at game start.
#
aroai_count_barracks_and_conscription_centers_of_all_countries = {
    if = {
        limit = {
            NOT = {
                has_global_variable = aroai_barracks_and_conscription_centers_were_counted
            }
        }
        set_global_variable = aroai_barracks_and_conscription_centers_were_counted
        every_country = {
            limit = {
                aroai_is_country_allowed = yes
            }
            set_variable = {
                name = aroai_building_barracks_total
                value = 0
            }
            set_variable = {
                name = aroai_building_conscription_center_total
                value = 0
            }
            every_scope_building = {
                if = {
                    limit = {
                        is_building_type = building_barracks
                    }
                    owner = {
                        change_variable = {
                            name = aroai_building_barracks_total
                            add = prev.level
                        }
                    }
                }
                else_if = {
                    limit = {
                        is_building_type = building_conscription_center
                    }
                    owner = {
                        change_variable = {
                            name = aroai_building_conscription_center_total
                            add = prev.level
                        }
                    }
                }
            }
        }

        # This is just a hack to avoid error log complaining about variables never being set, this never executes.
        if = {
            limit = {
                NOT = {
                    has_global_variable = aroai_barracks_and_conscription_centers_were_counted
                }
            }
            aroai_fix_error_log_complaining_about_variables = yes
        }
    }
}

#
# tag           : tag_aroai_set_date_of_next_iteration_for_all_countries
# Called by     : aroai_framework_events.1
# At game start we should give every country date of next iteration.
# A lot of weightning is done to ensure even distribution and to reduce load in first months of the game.
# while = { random_country = { } } is used instead of every_country = { } to avoid results being deterministic.
# TODO rework fixed days into usage of values such as aroai_days_in_the_iteration
#
aroai_set_date_of_next_iteration_for_all_countries = {
    if = {
        limit = {
            NOT = {
                has_global_variable = aroai_order_of_countries_was_determined
            }
        }
        set_global_variable = aroai_order_of_countries_was_determined

        # First distribute 14 biggest countries on uneven days in {1, 28}
        set_local_variable = {
            name = aroai_amount_of_states
            value = 1
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    count > 14
                }
            }
            change_local_variable = {
                name = aroai_amount_of_states
                add = 1
            }
        }
        set_local_variable = {
            name = aroai_date_of_next_iteration_offset
            value = 1
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
            }
            random_country = {
                limit = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
                set_variable = {
                    name = aroai_date_of_next_iteration
                    value = {
                        value = game_date
                        add = local_var:aroai_date_of_next_iteration_offset
                    }
                }
            }
            change_local_variable = {
                name = aroai_date_of_next_iteration_offset
                add = 2
            }
        }

        # Then distribute 14 biggest countries left on even days in {1, 28}
        set_local_variable = {
            name = aroai_amount_of_states
            value = 1
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    count > 28
                }
            }
            change_local_variable = {
                name = aroai_amount_of_states
                add = 1
            }
        }
        set_local_variable = {
            name = aroai_date_of_next_iteration_offset
            value = 2
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
            }
            random_country = {
                limit = {
                    aroai_is_country_allowed = yes
                    any_scope_state = {
                        count >= local_var:aroai_amount_of_states
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
                set_variable = {
                    name = aroai_date_of_next_iteration
                    value = {
                        value = game_date
                        add = local_var:aroai_date_of_next_iteration_offset
                    }
                }
            }
            change_local_variable = {
                name = aroai_date_of_next_iteration_offset
                add = 2
            }
        }

        # Then distibute all the players and countries over country rank 2 in days {1, 28}
        set_local_variable = {
            name = aroai_date_of_next_iteration_offset
            value = 1
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    OR = {
                        is_player = yes
                        country_rank > 2
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
            }
            random_country = {
                limit = {
                    aroai_is_country_allowed = yes
                    OR = {
                        is_player = yes
                        country_rank > 2
                    }
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
                set_variable = {
                    name = aroai_date_of_next_iteration
                    value = {
                        value = game_date
                        add = local_var:aroai_date_of_next_iteration_offset
                    }
                }
            }
            if = {
                limit = {
                    local_var:aroai_date_of_next_iteration_offset >= 28
                }
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    subtract = 27
                }
            }
            else = {
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    add = 1
                }
            }
        }

        # Then distibute all the countries over country rank 1 in days {29, 56}
        set_local_variable = {
            name = aroai_date_of_next_iteration_offset
            value = 29
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    country_rank > 1
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
            }
            random_country = {
                limit = {
                    aroai_is_country_allowed = yes
                    country_rank > 1
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
                set_variable = {
                    name = aroai_date_of_next_iteration
                    value = {
                        value = game_date
                        add = local_var:aroai_date_of_next_iteration_offset
                    }
                }
            }
            if = {
                limit = {
                    local_var:aroai_date_of_next_iteration_offset >= 56
                }
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    subtract = 27
                }
            }
            else = {
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    add = 1
                }
            }
        }

        # Then distibute everything what's left in days {57, 84}
        set_local_variable = {
            name = aroai_date_of_next_iteration_offset
            value = 57
        }
        while = {
            limit = {
                any_country = {
                    aroai_is_country_allowed = yes
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
            }
            random_country = {
                limit = {
                    aroai_is_country_allowed = yes
                    NOT = {
                        has_variable = aroai_date_of_next_iteration
                    }
                }
                set_variable = {
                    name = aroai_date_of_next_iteration
                    value = {
                        value = game_date
                        add = local_var:aroai_date_of_next_iteration_offset
                    }
                }
            }
            if = {
                limit = {
                    local_var:aroai_date_of_next_iteration_offset >= 84
                }
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    subtract = 27
                }
            }
            else = {
                change_local_variable = {
                    name = aroai_date_of_next_iteration_offset
                    add = 1
                }
            }
        }
    }
}

#
# tag           : tag_aroai_add_local_variable_to_array_variable
# Called by     : aroai_weekly_check_of_building_data
# $zero$ parameter controls behaviour between input and array when either of them have value equal to 0.
# 1 = add, same behaviour as if it was any other value, input is just added to array as usual.
# 2 - overwrite, input value of 0 will erase all other values in array, and non-0 input will overwrite array if it's 0.
# 3 = ignore, array is untouched, potentially even stays uninitialized.
#
aroai_add_local_variable_to_array_variable = {

    if = {
        limit = {
            OR = {
                $zero$ != 3
                local_var:$input$ != 0
            }
        }

        # Create output variable if it doesn't exist
        if = {
            limit = {
                NOT = {
                    has_variable = $output$
                }
            }
            set_variable = {
                name = $output$
                value = 0
            }
        }
        else = {

            # If input or output contains no value, zero it so we basically overwrite it with input
            if = {
                limit = {
                    $zero$ = 2
                    OR = {
                        local_var:$input$ = 0
                        AND = {
                            var:$output$ < 1
                            var:$output$ > -1
                        }
                    }
                }
                set_variable = {
                    name = $output$
                    value = 0
                }
            }
            else = {

                # If there is some value, make space for a new value first, starting with counting how much
                # elements the array contains as of now
                set_local_variable = {
                    name = aroai_num_elements_in_array
                    value = {
                        if = {
                            limit = {
                                var:$output$ < 0
                            }
                            value = 0
                            subtract = {
                                value = var:$output$
                                subtract = {
                                    value = var:$output$
                                    ceiling = yes
                                }
                            }
                        }
                        else = {
                            value = var:$output$
                            subtract = {
                                value = var:$output$
                                floor = yes
                            }
                        }
                        multiply = 100
                    }
                }

                # Remove enough elements so we could fit a new one, usually - 1 out - 1 in
                while = {
                    limit = {
                        local_var:aroai_num_elements_in_array >= $elements$
                    }
                    change_variable = {
                        name = $output$
                        subtract = {

                            # Get sum of all the values
                            value = {
                                value = var:$output$
                                if = {
                                    limit = {
                                        var:$output$ < 0
                                    }
                                    ceiling = yes
                                }
                                else = {
                                    floor = yes
                                }
                            }

                            # Divide if by number of elements in array to get average value
                            divide = local_var:aroai_num_elements_in_array

                            # Don't forget to round it cause , part is not used in value
                            round = yes
                        }
                    }

                    # We manipulate only this and not counter in array itself cause it will be floored
                    # anyways when we'll add new value and this local variable will be used in its place.
                    change_local_variable = {
                        name = aroai_num_elements_in_array
                        subtract = 1
                    }
                }
            }
        }

        set_variable = {
            name = $output$
            value = {
                value = var:$output$
                if = {
                    limit = {
                        var:$output$ < 0
                    }
                    ceiling = yes
                }
                else = {
                    floor = yes
                }
                add = {
                    value = local_var:$input$
                    round = yes
                    max = {
                        value = 2147483647
                        divide = $elements$
                    }
                    min = {
                        value = -2147483647
                        divide = $elements$
                    }
                }
            }
        }

        if = {
            limit = {
                NOT = {
                    has_local_variable = aroai_num_elements_in_array
                }
            }
            set_local_variable = {
                name = aroai_num_elements_in_array
                value = 0
            }
        }
        change_local_variable = {
            name = aroai_num_elements_in_array
            add = 1
        }
        if = {
            limit = {
                var:$output$ < 0
            }
            change_variable = {
                name = $output$
                subtract = {
                    value = local_var:aroai_num_elements_in_array
                    divide = 100
                }
            }
        }
        else = {
            change_variable = {
                name = $output$
                add = {
                    value = local_var:aroai_num_elements_in_array
                    divide = 100
                }
            }
        }

        remove_local_variable = aroai_num_elements_in_array
    }

    # Garbage collection
    if = {
        limit = {
            $cleanup$ = yes
        }
        remove_local_variable = $input$
    }
}


#
# tag           : tag_aroai_clear_country_cycle_variables
# called by     : aroai_framework_events.1 aroai_weekly_loop_events.1 aroai_construction_events.1 aroai_evaluation_events.1
# Clear a bunch of variables
#
aroai_clear_country_cycle_variables = {
    remove_variable = aroai_date_of_next_iteration
    remove_variable = aroai_building_construction_sector_total
    remove_variable = aroai_building_barracks_total
    remove_variable = aroai_building_conscription_center_total

    every_scope_state = {
        clear_variable_list = aroai_ongoing_constructions
    }
    aroai_clear_weekly_loop_variables = yes

    remove_variable = aroai_median_construction_efficiency
}

aroai_clear_country_iteration_variables = {

    remove_variable = aroai_army_size_equal_to_average_threat
    remove_variable = aroai_navy_size_equal_to_average_threat
    remove_variable = aroai_army_size_equal_to_biggest_threat
    remove_variable = aroai_navy_size_equal_to_biggest_threat

    remove_variable = aroai_resource_weight_factor
    remove_variable = aroai_agriculture_weight_factor
    remove_variable = aroai_industry_weight_factor

    remove_variable = aroai_incorporated_population
    remove_variable = aroai_total_coastal_population
    remove_variable = aroai_incorporated_coastal_population
    remove_variable = aroai_incorporated_gdp

    remove_variable = aroai_surplus_bureaucracy_target

    #remove_variable = aroai_square_root_of_minus_half_unincorporated_gdp_per_capita
    #remove_variable = aroai_square_root_of_construction_points

    remove_variable = aroai_unutilized_workforce_percent

    remove_variable = aroai_median_building_profitability
    remove_variable = aroai_median_building_productivity

    remove_variable = aroai_num_states_of_market_capital_coastline
    clear_variable_list = aroai_states_of_market_capital_coastline
    clear_variable_list = aroai_coastline_of_overseas_lands
    clear_variable_list = aroai_safe_to_delete_ports_in_overseas_lands

    # Variables from downsizing that are used in building as well
    remove_variable = aroai_building_government_administration_total
    remove_variable = aroai_building_university_total
    remove_variable = aroai_building_construction_sector_total
    #remove_variable = aroai_railway_total
    remove_variable = aroai_building_port_total
    #remove_variable = aroai_building_barracks_total
    remove_variable = aroai_building_naval_base_total

    clear_variable_list = aroai_states_suitable_for_construction

    remove_variable = aroai_tried_special_buildings

    aroai_perform_for_every_building_type = {
        effect = 9 # aroai_clear_building_type_variables
    }

    every_scope_state = {
        remove_variable = aroai_available_workforce
        remove_variable = aroai_building_construction_sector_level
        remove_variable = aroai_building_port_level
        remove_variable = aroai_building_barracks_level
        remove_variable = aroai_building_naval_base_level
        remove_variable = aroai_queued_agriculture_buildings
    }
}

#
# tag           : tag_aroai_clear_building_type_variables
# called by     : aroai_clear_country_iteration_variables
# Clear a bunch of variables
#
aroai_clear_building_type_variables = {
    remove_variable = aroai_building_type_$id$_collected_data
    clear_variable_list = aroai_building_type_$id$_allocation_1
    clear_variable_list = aroai_building_type_$id$_allocation_2
    clear_variable_list = aroai_building_type_$id$_allocation_3
    clear_variable_list = aroai_building_type_$id$_allocation_4
    clear_variable_list = aroai_building_type_$id$_allocation_5
    clear_variable_list = aroai_building_type_$id$_allocation_6
    clear_variable_list = aroai_building_type_$id$_allocation_7
    clear_variable_list = aroai_building_type_$id$_allocation_8
    clear_variable_list = aroai_building_type_$id$_allocation_9
    clear_variable_list = aroai_building_type_$id$_allocation_10
}


#
# tag           : tag_aroai_clear_building_type_variables
# called by     : aroai_start_building_construction aroai_add_ongoing_constructions_to_counter
#
#
aroai_add_to_building_type_counter = {
    if = {
        limit = {
            NOT = {
                has_variable = aroai_building_type_$counter$_collected_data
            }
        }
        set_variable = {
            name = aroai_building_type_$counter$_collected_data
            value = {
                value = $value$
                multiply = 10000000
            }
        }
    }
    else = {
        change_variable = {
            name = aroai_building_type_$counter$_collected_data
            add = {
                value = $value$
                multiply = 10000000
            }
        }
    }
}

aroai_perform_for_building_type = {
    switch = {
        trigger = $effect$
        1 = {
            aroai_collect_data_for_all_buildings_of_type = {
                key = $key$
                id = $id$
                counter = $counter$
                workforce = $workforce$
            }
        }
        2 = {
            aroai_collect_data_except_workforce_for_all_buildings_of_type = {
                key = $key$
                id = $id$
                counter = $counter$
            }
        }
        3 = {
            aroai_collect_only_workforce_data_for_all_buildings_of_type = {
                key = $key$
                id = $id$
                workforce = $workforce$
            }
        }
        4 = {
            aroai_downsize_production_building = {
                key = $key$
                id = $id$
                workforce = $workforce$
            }
        }
        5 = {
            aroai_check_priority_of_building = {
                key = $key$
                id = $id$
                class = $class$
                counter = $counter$
                crucial = $crucial$
                allocate = $allocate$
                limit = $limit$
            }
        }
        6 = {
            aroai_compare_building_priority_with_current_highest = {
                id = $id$
            }
        }
        7 = {
            aroai_add_to_list_of_buildings_with_highest_priority = {
                id = $id$
                order = $order$
            }
        }
        8 = {
            if = {
                limit = {
                    $id$ = aroai_buildings_with_highest_priority_id
                }
                root = {
                    aroai_choose_states_to_start_construction = {
                        key = $key$
                        id = $id$
                        class = $class$
                        counter = $counter$
                        scaling = $scaling$
                        crucial = $crucial$
                        branching = $branching$
                        allocate = $allocate$
                        workforce = $workforce$
                        limit = $limit$
                    }
                }
            }
        }
        9 = {
            aroai_clear_building_type_variables = {
                id = $id$
            }
        }
    }
}

