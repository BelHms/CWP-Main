subject_annexation_je = {
	icon = "gfx/interface/icons/event_icons/event_diplomacy.dds"

	invalid = {
		OR = {
			NOT = {
				exists = scope:target
			}
			NOT = {
				scope:target = { is_direct_subject_of = root }
			}
		}
	}

	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = overlord_annexation_referendum_desc
				trigger = {
					always = yes
				}
			}
		}
	}

	timeout = 180

	on_timeout = {
	}

	on_weekly_pulse = {
	}

	on_monthly_pulse = {
		random_events = {
			10 = 0
			10 = test_event.2
			10 = test_event.3
			10 = test_event.4
		}
	}

	on_yearly_pulse = {
	}

	current_value = {
		value = {
			scope:target = {
				var:annexation_support
			}
		}
	}

	weight = 50

	inheritable = no

	progressbar = yes
	
	progress_desc = journal_entry_goal_progress_integer

	should_be_pinned_by_default = yes
}


annexation_referendum_je = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect

	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_diplomacy.dds"

	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		set_variable = {
			name = annexation_support
			value = 0
		}
		set_variable = {
			name = weekly_annexation_support
			value = 0
		}
	}

	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
	}

	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
	}

	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
	}

	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
	}

	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
		NOT = {
			is_direct_subject_of = scope:target
		}
	}

	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {

	}

	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = subject_annexation_desc
				trigger = {
					always = yes
				}
			}
		}
	}

	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 180

	# effect which is executed when journal entry is timed out
	on_timeout = {

	}

	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
		effect = {
			change_variable = {
				name = annexation_support
				add = var:weekly_annexation_support
			}
			change_variable = {
				name = annexation_support
				add = {
					value = ai_gdp_comparison:overlord
					divide = 20
					min = -1
					max = 1
				}
				add = {
					value = ai_army_comparison:overlord
					divide = 40
					min = -0.5
					max = 0.5
				}
				add = {
					value = ai_navy_comparison:overlord
					divide = 40
					min = -0.5
					max = 0.5
				}
				add = {
					value = ai_ideological_opinion:overlord
					divide = 20
					min = -1
					max = 1
				}
			}
			if = {
				limit = {
					overlord.average_sol > root.average_sol
				}
				change_variable = {
					name = annexation_support
					add = 0.2
				}
			}
			if = {
				limit = {
					any_scope_pop = {
						pop_is_discriminated = no
						OR = {
							culture = {
								culture_is_discriminated_in = root.overlord
							}
						}
					}
				}
				change_variable = {
					name = annexation_support
					add = -0.1
				}
			}
			if = {
				limit = {
					overlord = {
						any_primary_culture = {
							is_primary_culture_of = root
						}
					}
				}
				change_variable = {
					name = annexation_support
					add = 1
				}
			}
			else_if = {
				limit = {
					overlord = {
						AND = {
							any_primary_culture = {
								shares_heritage_and_other_trait_with_any_primary_culture = root
							}
							OR = {
								has_law = law_type:law_national_supremacy
								has_law = law_type:law_racial_segregation
								has_law = law_type:law_cultural_exclusion
								has_law = law_type:law_multicultural
							}
						}
					}
				}
				change_variable = {
					name = annexation_support
					add = 0.75
				}
			}
			else_if = {
				limit = {
					overlord = {
						AND = {
							any_primary_culture = {
								shares_heritage_trait_with_any_primary_culture = root
							}
							OR = {
								has_law = law_type:law_racial_segregation
								has_law = law_type:law_cultural_exclusion
								has_law = law_type:law_multicultural
							}
						}
					}
				}
				change_variable = {
					name = annexation_support
					add = 0.5
				}
			}
			else_if = {
				limit = {
					overlord = {
						AND = {
							any_primary_culture = {
								shares_trait_with_any_primary_culture = root
							}
							OR = {
								has_law = law_type:law_cultural_exclusion
								has_law = law_type:law_multicultural
							}
						}
					}
				}
				change_variable = {
					name = annexation_support
					add = 0.25
				}
			}
			else_if = {
				limit = {
					overlord = {
						has_law = law_type:law_multicultural
					}
				}
				change_variable = {
					name = annexation_support
					add = 0.1
				}
			}
		}
	}

	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		events = {
			test_event.5
		}
	}

	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
	}

	# a script value computing the goal completion metric
	current_value = {
		value = var:annexation_support
	}

	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 200

	# yes/no, determines if a newly created country (such as a revolutionary country) should inherit this type of journal entry - note that external dependencies such as country variables etc are not automatically inherited
	inheritable = no

	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
		
	}

	# yes/no, if yes, a progress bar is shown
	progressbar = yes

	#progress_desc = journal_entry_goal_progress_integer

	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}
